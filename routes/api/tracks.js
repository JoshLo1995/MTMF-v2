const express = require("express");
const router = express.Router();
// import { uploadTrack } from '../../../actions/trackActions'; 

// Load input validation
const validateTrackUpload = require('../../validation/track');

// Load track actions


// Load Track model
const Track = require("../../models/Track");
const User = require('../../models/User');


// @route POST api/tracks/uploadTrack
// @desc Post to db the name of the track and imageData as a base64. tracks is a property of the user that the data can be pushed to
// @access Public
router.post("/uploadTrack/:imageData", (req, res) => {
    // Validate uploaded image LOLJK skip this until after the bootcamp submission
    // const { errors, isValid } = validateTrackUpload(req.body);
    // // Check validation
    // if (!isValid) {
    //     return res.status(400).json(errors);
    // }

    // console.log(JSON.parse(req.params.imageData));
    const newTrack = JSON.stringify(req.params.imageData); // Taking the passed in image object and converting it into a JSON string
    // create new track object
    // const newTrack = new Track({
    //     // name: req.body.name, no need to name the track before assigning it to the user's account
    //     imageData: req.params.imageData,
    // });
    // save new track object
    console.log("parsing newTrack back to a JSON")
    console.log(JSON.parse(newTrack));
    // console.log('saving new track to db for processing', newTrack);
    // newTrack.save(); 
});

// @route GET api/tracks/getUserTracks
// @desc Get the reference to the user's tracks array
// @access Public
router.get('/getUserTracks/:email', (req, res) => {
    // Find user by email
    User.findOne({email: req.params.email}).then(user => {
        // check if user exists
        if (user) {
            // Return tracks array
            res.send(user.tracks);
        } else {
            return res.status(400).json(errors); // Doesn't actually return any errors atm lol
        }
    });
    // Return null because if you get to this point, you're screwed
    return null;
})

// @route POST api/tracks/uploadLine
// @desc Post to db the racing line generated by A* as a base64 to overlay on top of the post-processed track image
// @access Public

// @route GET api/tracks/getImage
// @desc Get the post-processed track base64 and the A* line base64 for the client to overlay and display
// @access Public

module.exports = router;